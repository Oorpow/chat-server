// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id  Int @id @default(autoincrement())
  username String @db.VarChar(50) @unique
  password String @db.VarChar(50)
  nickname String @db.VarChar(50)
  email String @db.VarChar(50)
  avatar String @db.VarChar(100) @default("")
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt

  // user的好友
  friends Friendship[] @relation("userToFriend")

  // user是哪些人的好友
  inverseFriends Friendship[] @relation("friendToUser")
}

// 好友关系表(user自身的多对多)
model Friendship {
  user User @relation("userToFriend", fields: [userId], references: [id])
  userId Int

  friend User @relation("friendToUser", fields: [friendId], references: [id])
  friendId Int

  @@id([userId, friendId])
}

model FriendRequest {
  id  Int @id @default(autoincrement())
  // 请求发送方id
  fromUserId Int
  // 接收方id
  toUserId Int
  reason String @db.VarChar(100)
  // 状态, 0 pending, 1 agree, 2 reject
  status Int
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

model Chatroom {
  id  Int @id @default(autoincrement())
  name String @db.VarChar(50)
  // 聊天室类型 true 群聊 false 私聊
  type Boolean @default(false)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

model UserChatroom {
  userId    Int 
  chatroomId  Int

  @@id([userId, chatroomId])
}


model ChatHistory {
  id Int @id @default(autoincrement())
  content String @db.VarChar(500)
  //聊天记录类型 text:0、image:1、file:2
  type Int
  chatroomId Int
  // 发送人id
  fromUserId Int
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}